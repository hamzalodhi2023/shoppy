#!/usr/bin/env node

/**
 * Module dependencies.
 * @requires express - Express.js web application framework
 * @requires debug - Debug utility for development logging
 * @requires http - Node.js HTTP server module
 * @requires dotenv - Environment variable loader
 */

var app = require("../app");
var debug = require("debug")("development:server");
var http = require("http");
require("dotenv").config();

/**
 * Get port from environment and store in Express.
 * Prioritizes PORT from environment variables, defaults to 3000 if not set
 * @constant {number|string} port - Normalized port value
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server instance.
 * @constant {http.Server} server - HTTP server instance
 */

var server = http.createServer(app);

/**
 * Initialize server to listen on specified port across all network interfaces.
 * Sets up error and listening event handlers.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize port value to ensure valid server configuration.
 * @param {string|number} val - Port value to normalize
 * @returns {number|string|boolean} - Normalized port value or false if invalid
 * @throws {Error} - Throws error for invalid port values
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Error event handler for HTTP server.
 * Provides specific error handling for common server issues.
 * @param {Error} error - Error object from server
 * @throws {Error} - Rethrows error for unhandled cases
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Listening event handler for HTTP server.
 * Logs server address information using debug utility.
 * @function
 * @returns {void}
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
